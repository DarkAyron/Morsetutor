diff -Naru a/Morsetutor/dtb_utils.c b/Morsetutor/dtb_utils.c
--- a/Morsetutor/dtb_utils.c	2017-06-05 17:27:38.135785780 +0000
+++ b/Morsetutor/dtb_utils.c	2017-06-05 17:33:45.955779904 +0000
@@ -21,11 +21,6 @@
 #include <Xm/PushB.h>
 #include <Xm/SashP.h>
 #include <Xm/RowColumn.h>
-#include <Dt/Help.h>
-#include <Dt/HelpDialog.h>
-#include <Dt/HelpQuickD.h>
-#include <Dt/Session.h>
-#include <Dt/Dnd.h>
 #include "dtb_utils.h"
 
 #ifndef min
@@ -40,33 +35,6 @@
 #define ABS(x) ((x) >= 0? (x):(-(x)))
 #endif
 
-typedef struct
-{
-    Widget              widget;
-    DtDndProtocol       protocol;
-    unsigned char       operations;
-    Boolean             bufferIsText;
-    Boolean             allowDropOnRootWindow;
-    Widget              sourceIcon;
-    DtbDndDragCallback  callback;
-    XtCallbackRec       convertCBRec[2];
-    XtCallbackRec       dragToRootCBRec[2];
-    XtCallbackRec       dragFinishCBRec[2];
-} DtbDragSiteRec, *DtbDragSite;
-
-typedef struct
-{
-    Widget              widget;
-    DtDndProtocol       protocols;
-    unsigned char       operations;
-    Boolean             textIsBuffer;
-    Boolean             dropsOnChildren;
-    Boolean             preservePreviousRegistration;
-    DtbDndDropCallback  callback;
-    XtCallbackRec       animateCBRec[2];
-    XtCallbackRec       transferCBRec[2];
-} DtbDropSiteRec, *DtbDropSite;
-
 /*
  * This structure keeps track of widget/menu pairs
  */
@@ -264,58 +232,6 @@
 			XtPointer	callData
 );
 
-static int dtb_drag_terminate(DtbDragSite dragSite);
-
-static void dtb_drag_button1_motion_handler(
-        Widget          dragInitiator,
-        XtPointer       clientData,
-        XEvent         *event
-);
-
-static void dtb_drag_button2_event_handler(
-        Widget          dragInitiator,
-        XtPointer       clientData,
-        XEvent         *event
-);
-
-static int dtb_drag_start(DtbDragSite dragSite, XEvent *event);
-
-static void dtb_drag_convertCB(
-			Widget		dragContext,
-			XtPointer	clientData,
-			XtPointer	callData
-);
-
-static void dtb_drag_to_rootCB(
-			Widget		dragContext,
-			XtPointer	clientData,
-			XtPointer	callData
-);
-
-static void dtb_drag_finishCB(
-			Widget		dragContext,
-			XtPointer	clientData,
-			XtPointer	callData
-);
-
-static void dtb_drop_animateCB(
-			Widget		dragContext,
-			XtPointer	clientData,
-			XtPointer	callData
-);
-
-static void dtb_drop_transferCB(
-			Widget		dragContext,
-			XtPointer	clientData,
-			XtPointer	callData
-);
-
-
-/*
- * Variable for storing client session save callback
- */
-static DtbClientSessionSaveCB		dtb_client_session_saveCB = NULL;
-
 /*
  * Variable for storing top level widget
  */
@@ -331,13 +247,6 @@
  */
 static DtbMenuRef	popupMenus = NULL;
 static int	numPopupMenus = 0;
-#include <Dt/Dnd.h>
-
-#define DRAG_THRESHOLD  10
-static Boolean  dragInProgress = False;
-static int	dragInitialX = -1;
-static int	dragInitialY = -1;
-
 
 /*
  * Directory where the binary for this process whate loaded from
@@ -922,481 +831,6 @@
     return(dtb_save_command_str); 
 }
 
-
-/* 
-** Generic callback function to be attached as XmNhelpCallback and
-** provide support for on-object and Help-key help.  The help text to
-** be displayed is provided via a specialized data structure passed in
-** as client data.
-*/
-
-void
-dtb_help_dispatch(
-    Widget 	widget,
-    XtPointer 	clientData,
-    XtPointer 	callData
-)
-{
-    DtbObjectHelpData 	help_data = (DtbObjectHelpData)clientData;
-    int             	i;
-    Arg             	wargs[10];
-    char		buffer[100];
-    Widget		back_button;
-    static Widget	Quick_help_dialog = (Widget)NULL;
-    static Widget	MoreButton;
-
-    /* 
-    ** In order to save the more-help info (help volume & location ID) as part
-    ** of the quick help dialog's backtrack mechanism, we have to splice the 
-    ** volume & ID strings together and save them as the help volume field.
-    ** If there isn't supplemental help information, we save a null string.
-    **
-    ** Checking the status of the more-help info also lets us decide whether
-    ** the "More..." button should be enabled on the dialog.
-    */
-    if( help_data->help_volume     ==0 || *(help_data->help_volume) == NULL ||
-	help_data->help_locationID ==0 || *(help_data->help_locationID)== NULL){
-		buffer[0] = '\0';
-    }
-    else {
-	sprintf(buffer,"%s/%s",help_data->help_volume,help_data->help_locationID);
-    }
-
-    /* 
-    ** If this is our first time to post help, create the proper dialog and
-    ** set its attributes to suit the current object.  If not, then just
-    ** update the attributes.
-    **
-    ** (You have to be careful about gratuitous SetValues on the dialog because
-    ** its internal stack mechanism takes repeated settings as separate items
-    ** and updates the stack for each.)
-    */
-    if(Quick_help_dialog == (Widget)NULL) {
-        /* Create shared help dialog */
-        i = 0;
-	XtSetArg(wargs[i],XmNtitle, "Application Help");            i++;
-	XtSetArg(wargs[i],DtNhelpType, DtHELP_TYPE_DYNAMIC_STRING); i++;
-	XtSetArg(wargs[i],DtNstringData,help_data->help_text);      i++;
-        XtSetArg(wargs[i],DtNhelpVolume,buffer);		    i++;
-	Quick_help_dialog = DtCreateHelpQuickDialog(dtb_get_toplevel_widget(),
-		"Help",wargs,i);
-
-	/* 
-	** Fetch out the Dialog's More button child and hook the 'more help'
-	** handler to its activateCallback.  Set it's current status to
-	** indicate whether this object has supplemental help data. 
-	*/
-	MoreButton = DtHelpQuickDialogGetChild(Quick_help_dialog,
-		DtHELP_QUICK_MORE_BUTTON);
-	XtManageChild(MoreButton);
-	XtAddCallback(MoreButton,XmNactivateCallback,dtb_more_help_dispatch,
-		(XtPointer)Quick_help_dialog);
-	if(buffer[0] == '\0') XtSetSensitive(MoreButton,False);
-
-	/* 
-	** Fetch out the Dialog's Backtrack button child & hook a callback
-	** that will control button sensitivity based on the presence of more
-	** help data.
-	*/
-	back_button = DtHelpQuickDialogGetChild(Quick_help_dialog,
-		DtHELP_QUICK_BACK_BUTTON);
-	XtAddCallback(back_button,XmNactivateCallback,dtb_help_back_hdlr,
-		(XtPointer)Quick_help_dialog);
-    }
-    /* Otherwise the dialog already exists so we just set the attributes. */
-    else {
-	/* 
-	** If we have supplemental help info, enable the more button.
-	** Also save this info for later use in the backtrack handler.
-	*/
-	if(buffer[0] == '\0') {
-	    XtSetSensitive(MoreButton,False);
-	}
-	else {
-	    XtSetSensitive(MoreButton,True);
-	}
-
-        XtVaSetValues(Quick_help_dialog,
-    	    DtNhelpType, DtHELP_TYPE_DYNAMIC_STRING,
-            DtNhelpVolume,buffer,
-            DtNstringData,help_data->help_text,
-	    NULL);
-    }
-
-    /* Now display the help dialog */
-    XtManageChild(Quick_help_dialog);
-}
-
-
-/*
-** This callback is invoked when the user presses "More..." on the
-** QuickHelpDialog.  It figures out whether a help volume entry is associated
-** with the displayed help text, and if so it brings up a GeneralHelpDialog
-** to display the appropriate help volume information.
-*/
-void
-dtb_more_help_dispatch(
-    Widget 	widget,
-    XtPointer 	clientData,
-    XtPointer 	callData
-)
-{
-    int             	i;
-    Arg             	wargs[10];
-    String		buffer, vol, loc;
-    char		*cp;
-    static Widget	GeneralHelpDialog = (Widget) NULL;
-    Widget		help_dialog = (Widget)clientData;
-
-    /* Fetch the saved volume/locationID information from the dialog widget */
-    XtVaGetValues(help_dialog,
-	DtNhelpVolume,&buffer,
-	NULL);
-
-    /* 
-    ** Parse the combined volume/locationID string.  If that fails there
-    ** must be no data, so don't bother displaying the GeneralHelpDialog.
-    ** (We shouldn't be in this callback routine if that happens, though...)
-    */
-    if( (cp=strrchr(buffer,'/')) != (char *)NULL) {
-	*cp++ = 0;
-	vol = buffer;
-	loc = cp; 
-    }
-
-    if(GeneralHelpDialog == (Widget)NULL) {
-	/* Create General Help Dialog */
-        i = 0;
-	XtSetArg(wargs[i],XmNtitle, "Application Help");        i++;
-	XtSetArg(wargs[i],DtNhelpType, DtHELP_TYPE_TOPIC);      i++;
-	XtSetArg(wargs[i],DtNhelpVolume, vol);			i++;
-	XtSetArg(wargs[i],DtNlocationId,loc);			i++;
-
-	GeneralHelpDialog = DtCreateHelpDialog(dtb_get_toplevel_widget(),
-		"GeneralHelp",wargs,i);
-    }
-    else {
-        i = 0;
-        XtSetArg(wargs[i],DtNhelpType, DtHELP_TYPE_TOPIC);  	i++;
-        XtSetArg(wargs[i],DtNhelpVolume,vol);			i++;
-        XtSetArg(wargs[i],DtNlocationId,loc);			i++;
-        XtSetValues(GeneralHelpDialog,wargs,i);
-    }
-
-    /* Now take down the quick help dialog and display the full help one */
-    XtManageChild(GeneralHelpDialog);
-    XtUnmanageChild(help_dialog);
-}
-
-
-/*
-** Callback that is added to the QuickHelpDialog widget's "Backtrack" button
-** and is used to control the "More.." button.  At each step in the backtrack,
-** this routine checks to see if there is help volume & location info stored
-** in the dialog's helpVolume resource.  If so, then the "More..." button is
-** enabled.  If not, then it is disabled.
-*/
-void
-dtb_help_back_hdlr(
-    Widget 	widget,
-    XtPointer 	clientData,
-    XtPointer 	callData
-)
-{
-    String		buffer, text;
-    char		*cp;
-    Widget		more_button;
-    Widget		help_dialog = (Widget)clientData;
-
-    /* Fetch the saved volume/locationID information from the dialog widget */
-    XtVaGetValues(help_dialog,
-	DtNhelpVolume,&buffer,
-	DtNstringData,&text,
-	NULL);
-
-    /* Get a handle to the "More..." button */
-    more_button = DtHelpQuickDialogGetChild(help_dialog,
-		DtHELP_QUICK_MORE_BUTTON);
-    /* 
-    ** Parse the combined volume/locationID string.  Disable the "More..."
-    ** button if there isn't any help info, and enable it if there is.
-    */
-    if( buffer == 0 || (*buffer == NULL) ||
-	(cp=strrchr(buffer,'/')) == (char *)NULL) {
-		XtSetSensitive(more_button,False);
-    }
-    else {
-		XtSetSensitive(more_button,True);
-    }
-}
-
-
-/*
-** Utility function used to provide support for on-item help.
-** It is typically invoked via a callback on the "On Item" item in the
-** main menubar's "Help" menu.
-*/
-void
-dtb_do_onitem_help()
-{
-    Widget	target;
-
-    /* Call the DtHelp routine that supports interactive on-item help. */
-    if(DtHelpReturnSelectedWidgetId(dtb_get_toplevel_widget(),
-	(Cursor)NULL,&target) != DtHELP_SELECT_VALID) return;
-	
-    /*
-    ** Starting at the target widget, wander up the widget tree looking
-    ** for one that has an XmNhelpCallback, and call the first one we
-    ** find.
-    */
-    while(target != (Widget)NULL) {
-	if( XtHasCallbacks(target,XmNhelpCallback) == XtCallbackHasSome) {
-	    XtCallCallbacks(target,XmNhelpCallback,(XtPointer)NULL);
-	    return;
-	}
-	else {
-	    target = XtParent(target);
-	}
-    }
-    return;
-}
-
-
-/*
-** Utility function called to display help volume information.
-** It needs the name of the help volume and the location ID (both as
-** strings) so it can configure the full help dialog widget properly.
-*/
-int
-dtb_show_help_volume_info(
-    char	*volume_name,
-    char	*location_id
-)
-{
-    int             	i;
-    Arg             	wargs[10];
-    static Widget	GeneralHelpDialog = (Widget) NULL;
-    
-    if(GeneralHelpDialog == (Widget)NULL) {
-	/* Create General Help Dialog */
-        i = 0;
-   XtSetArg(wargs[i],XmNtitle, "Application Help");        i++;
-	XtSetArg(wargs[i],DtNhelpType, DtHELP_TYPE_TOPIC);      i++;
-	XtSetArg(wargs[i],DtNhelpVolume, volume_name);		i++;
-	XtSetArg(wargs[i],DtNlocationId,location_id);		i++;
-
-	GeneralHelpDialog = DtCreateHelpDialog(dtb_get_toplevel_widget(),
-		"GeneralHelp",wargs,i);
-    }
-    else {
-        i = 0;
-        XtSetArg(wargs[i],DtNhelpType, DtHELP_TYPE_TOPIC);  	i++;
-        XtSetArg(wargs[i],DtNhelpVolume,volume_name);		i++;
-        XtSetArg(wargs[i],DtNlocationId,location_id);		i++;
-        XtSetValues(GeneralHelpDialog,wargs,i);
-    }
-
-    /* Now display the full help dialog */
-    XtManageChild(GeneralHelpDialog);
-
-    return(0);
-}
-
-
-/* 
-** dtb_call_help_callback()
-** Utility routine to call the help callbacks on a target widget.  This
-** is predominantly used to display help data on a dialog by having this
-** function as the activate callback on the dialog's help button.
-*/
-void 
-dtb_call_help_callback(
-    Widget widget,
-    XtPointer clientData,
-    XtPointer callData
-)
-{
-	Widget target = (Widget)clientData;
-
-	XtCallCallbacks(target,XmNhelpCallback,(XtPointer)NULL);
-}
-
-
-/*
- * dtb_session_save()
- * Callback that is called when the application (top level
- * widget of application) gets a WM_SAVE_YOURSELF ClientMessage
- * This callback will call the client/application's session
- * save callback.
- */
-void
-dtb_session_save(
-    Widget 	widget,
-    XtPointer 	clientData,
-    XtPointer 	callData
-)
-{
-    int				new_argc,
-    				client_argc = 0,
-    				new_argc_counter,
-    				i;
-    char			**new_argv,
-    				**client_argv = NULL,
-    				*session_file_path,
-    				*session_file_name,
-    				*app_name = NULL;
-    Boolean			status = False;
-    DtbClientSessionSaveCB	session_saveCB;
-
-    /*
-     * Return if no widget passed in.
-     */
-    if (!widget)
-        return;
-
-    /*
-     * Get session file path/name to store application's state
-     */
-    if (DtSessionSavePath(widget, &session_file_path, &session_file_name) == False)
-        return;
-
-    /*
-     * Get client session save callback
-     */
-    session_saveCB = dtb_get_client_session_saveCB();
-
-    /*
-     * Call client session save callback
-     */
-    if (session_saveCB)
-        /*
-         * client_argv and client_argc are the variables that
-         * will contain any extra command line options
-         * that need to be used when invoking the application
-         * to bring it to the current state.
-         */
-        status = session_saveCB(widget, session_file_path,
-        			&client_argv, &client_argc);
-
-    /*
-     * Generate the reinvoking command and add it as the property value
-     */
-
-    /*  
-     * Fetch command used to invoke application
-     */
-    app_name = dtb_get_command();
-
-    /*
-     * new_argc and new_argc are the variables used to reconstruct
-     * the command to re-invoke the application
-     */
-
-    /*
-     * Start new_argc with:
-     *	1	for argv[0], normally the application
-     *	client_argc	any extra command line options as
-     *		returned from client session save
-     *		callback
-     */
-    new_argc = 1 + client_argc;
-
-    /*
-     * If the status returned from session save callback is 'True',
-     * the session file was actually used. This means we need to
-     * add:
-     * 	-session <session file name>
-     * to the command saved, which is 2 more strings.
-     */
-    if (status)
-        new_argc += 2;
-
-    /*
-     * Allocate vector
-     */
-    new_argv = (char **)XtMalloc((sizeof(char **) * new_argc));
-
-    /*
-     * Set new_argv[0] to be the application name
-     */
-    new_argc_counter = 0;
-    new_argv[new_argc_counter] = app_name;
-    new_argc_counter++;
-
-    /*
-     * Proceed to copy every command line option from
-     * client_argv. Skip -session, if found.
-     */
-    for (i=0; i < client_argc;)
-    {
-        if (strcmp(client_argv[i], "-session"))
-        {
-            new_argv[new_argc_counter] = client_argv[i];
-            new_argc_counter++;
-        }
-        else
-        {
-            /*
-             * Skip "-session"
-             * The next increment below will skip the session file.
-             */
-            ++i;
-        }
-
-        ++i;
-        
-    }
-
-    /*
-     * If session file used, add
-     *	-session <session file name>
-     */
-    if (status)
-    {
-        new_argv[new_argc_counter] = "-session";
-        new_argc_counter++;
-        new_argv[new_argc_counter] = session_file_name;
-    }
-    else
-    {
-        /*
-         * otherwise, destroy session file
-         */
-        (void)unlink(session_file_path);
-    }
-
-    /*
-     * Set WM_COMMAND property with vector constructed
-     */
-    XSetCommand(XtDisplay(widget), XtWindow(widget),
-    		new_argv, new_argc);
-
-    /*
-     * Free argument vector
-     */
-    XtFree ((char *)new_argv);
-
-    /*
-     * CDE Sessioning API states that the path/name
-     * strings have to be free'd by the application.
-     */
-    XtFree ((char *)session_file_path);
-    XtFree ((char *)session_file_name);
-}
-
-
-/*
- * dtb_get_client_session_saveCB()
- */
-DtbClientSessionSaveCB
-dtb_get_client_session_saveCB()
-{
-    return(dtb_client_session_saveCB);
-
-}
-
-
 /*
  * Create a Message Dialog.
  */
@@ -1651,21 +1085,6 @@
             XtAddCallback(action_btn, XmNactivateCallback,
                           mbr->action3_callback, NULL);
     }
-    if (mbr->help_button)
-    {
-	if (help_data_copy != (DtbObjectHelpData) NULL)
-	{
-            XtAddCallback(msg_dlg,
-                        XmNhelpCallback, dtb_help_dispatch,
-                        (XtPointer) help_data_copy);
-	}
-	else if (mbr->help_data.help_text != (char *) NULL)
-	{
-	    XtAddCallback(msg_dlg, 
-			XmNhelpCallback, dtb_help_dispatch,
-			(XtPointer) &(mbr->help_data));
-	}
-    }
 
     XtManageChild(msg_dlg);
     XRaiseWindow(XtDisplay(msg_dlg), XtWindow(XtParent(msg_dlg)));
@@ -1754,22 +1173,6 @@
                         (XtPointer) DTB_ANSWER_ACTION3);
     }
 
-    if (mbr->help_button) 
-    { 
-        if (help_data_copy != (DtbObjectHelpData) NULL)
-        {
-            XtAddCallback(modal_dlg_pane, 
-                        XmNhelpCallback, dtb_help_dispatch, 
-                        (XtPointer) help_data_copy); 
-	}
-        else if (mbr->help_data.help_text != (char *) NULL) 
-        { 
-            XtAddCallback(modal_dlg_pane, 
-                        XmNhelpCallback, dtb_help_dispatch, 
-                        (XtPointer) &(mbr->help_data)); 
-        }
-    }   
-
     /* Popup Modal MessageDialog and wait for answer */
     XtManageChild(modal_dlg_pane);
     XRaiseWindow(XtDisplay(modal_dlg_pane), XtWindow(XtParent(modal_dlg_pane)));
@@ -4006,364 +3409,3 @@
 }
 
 
-/*
- * Returns non-negative if successful.
- */
-int
-dtb_drag_site_register(
-                        Widget 			widget,
-			DtbDndDragCallback	callback,
-			DtDndProtocol		protocol,
-			unsigned char		operations,
-			Boolean			bufferIsText,
-			Boolean			allowDropOnRootWindow,
-			Pixmap			cursor,
-			Pixmap			cursorMask,
-			DtbDragSiteHandle	*dragSiteHandleOut
-)
-{
-    DtbDragSite dragSite = (DtbDragSite)XtCalloc(1,sizeof(DtbDragSiteRec));
-    Widget	sourceIcon = NULL;
-
-    if (dragSite != NULL)
-    {
-        dragSite->widget = widget;
-    	dragSite->protocol = protocol;
-    	dragSite->operations = operations;
-	dragSite->bufferIsText = bufferIsText;
-	dragSite->allowDropOnRootWindow = allowDropOnRootWindow;
-	if ((cursor != NULL) && (cursorMask != NULL))
-	{
-	    dragSite->sourceIcon = 
-			DtDndCreateSourceIcon(widget, cursor, cursorMask);
-	}
-    	dragSite->callback = callback;
-        dragSite->convertCBRec[0].callback = dtb_drag_convertCB;
-        dragSite->dragToRootCBRec[0].callback = dtb_drag_to_rootCB;
-        dragSite->dragFinishCBRec[0].callback = dtb_drag_finishCB;
-    
-        XtAddEventHandler(widget, Button1MotionMask, False,
-            (XtEventHandler)dtb_drag_button1_motion_handler, 
-	    (XtPointer)dragSite);
-
-        XtAddEventHandler(widget, ButtonPressMask, False,
-            (XtEventHandler)dtb_drag_button2_event_handler,
-            (XtPointer)dragSite);
-    }
-    
-    /*
-     * Pass back a handle, so that this can be freed, later. Unregistering
-     * drag sites is not currently implemented, but this gives the ability
-     * to provide this functionality in the future.
-     */
-    if (dragSiteHandleOut != NULL)
-    {
-        *dragSiteHandleOut = (DtbDragSiteHandle)dragSite;
-    }
-    return 0;
-}
-
-
-int
-dtb_drop_site_register(
-                        Widget                  widget,
-                        DtbDndDropCallback      callback,
-                        DtDndProtocol		protocols,
-                        unsigned char           operations,
-                        Boolean                 dropsOnChildren,
-                        Boolean                 preservePreviousRegistration,
-                        DtbDropSiteHandle       *dropSiteHandleOut
-)
-{
-    DtbDropSite dropSite = (DtbDropSite)NULL;
-
-    if (   (callback != NULL)
-	&& ((dropSite = (DtbDropSite)XtCalloc(1,sizeof(DtbDropSiteRec))) 
-								!= NULL) 
-       )
-    {
-	DtbDndDropRegisterInfoRec	regInfo;
-
-	/* initialize the data */
-        dropSite->widget = widget;
-        dropSite->callback = callback;
-        dropSite->protocols = protocols;
-        dropSite->operations = operations;
-        dropSite->dropsOnChildren = dropsOnChildren;
-        dropSite->preservePreviousRegistration = preservePreviousRegistration;
-        dropSite->animateCBRec[0].callback = dtb_drop_animateCB;
-        dropSite->animateCBRec[0].closure = (XtPointer)dropSite;
-        dropSite->transferCBRec[0].callback = dtb_drop_transferCB;
-        dropSite->transferCBRec[0].closure = (XtPointer)dropSite;
-
-        /* Let the client modify the drop site initialization */
-        regInfo.protocols = dropSite->protocols;
-        regInfo.operations = dropSite->operations;
-        regInfo.textIsBuffer = dropSite->textIsBuffer;
-        regInfo.preservePreviousRegistration = 
-				dropSite->preservePreviousRegistration;
-        regInfo.respondToDropsOnChildren = dropSite->dropsOnChildren;
-        dropSite->callback(widget, DTB_DND_REGISTER, &regInfo, NULL, NULL);
-
-        /* actually register it! */
-        DtDndVaDropRegister(
-	    widget, regInfo.protocols, regInfo.operations,
-	    dropSite->transferCBRec,
-	    DtNregisterChildren, regInfo.respondToDropsOnChildren,
-	    DtNtextIsBuffer, regInfo.textIsBuffer,
-#ifdef DtNpreserveRegistration
-	    DtNpreserveRegistration, regInfo.preservePreviousRegistration,
-#endif
-	    DtNdropAnimateCallback, dropSite->animateCBRec,
-	    NULL);
-    }
-
-    if (dropSiteHandleOut != NULL)
-    {
-	*dropSiteHandleOut = (DtbDropSiteHandle)dropSite;
-    }
-
-    return ((dropSite == NULL)? -1:0);
-}
-
-
-static int
-dtb_drag_terminate(DtbDragSite dragSite)
-{
-    dragInProgress = False;
-    dragInitialX = -1;
-    dragInitialY = -1;
-    dragSite->convertCBRec[0].closure = NULL;
-    dragSite->dragToRootCBRec[0].closure = NULL;
-    dragSite->dragFinishCBRec[0].closure = NULL;
-    return 0;
-}
-
-
-/*
- * dragMotionHandler
- *
- * Determine if the pointer has moved beyond the drag threshold while button 1
- * was being held down.
- */
-static void
-dtb_drag_button1_motion_handler(
-        Widget          dragInitiator,
-        XtPointer       clientData,
-        XEvent         *event
-)
-{
-    int             	diffX, diffY;
-    DtbDragSite		dragSite = (DtbDragSite)clientData;
-
-    if (!dragInProgress) {
-        /*
-         * If the drag is just starting, set initial button down coords
-         */
-        if (dragInitialX == -1 && dragInitialY == -1) {
-                dragInitialX = event->xmotion.x;
-                dragInitialY = event->xmotion.y;
-        }
-
-        /*
-         * Find out how far pointer has moved since button press
-         */
-        diffX = dragInitialX - event->xmotion.x;
-        diffY = dragInitialY - event->xmotion.y;
-        
-        if ((ABS(diffX) >= DRAG_THRESHOLD) ||
-            (ABS(diffY) >= DRAG_THRESHOLD)) 
-	{
-		dtb_drag_start(dragSite, event);
-                dragInitialX = -1;
-                dragInitialY = -1;
-        }
-    }
-}
-
-
-/*
- * Starts a drag if Button2 is pressed (if the system is configured for
- * Button2 transfers).
- */
-static void
-dtb_drag_button2_event_handler(
-        Widget          dragInitiator,
-        XtPointer       clientData,
-        XEvent         *event
-)
-{
-    if (   (event->type == ButtonPress)
-        && (event->xbutton.button == 2))
-    {
-        Boolean         enableBtn1Transfer = (Boolean)0;
-        Boolean         mouseButton2IsTransfer = False;
-
-        /*
-         * We need to determine whether mouse button 2 is adjust or
-         * transfer. Although the resource value is of type Boolean, it
-         * can actually have integer values. This code is from page 52
-         * of _Common Desktop Environment: Programmer's Guide_.
-         */
-        XtVaGetValues((Widget)XmGetDisplay(dragInitiator),
-                "enableBtn1Transfer", &enableBtn1Transfer,
-                NULL);
-        mouseButton2IsTransfer = (enableBtn1Transfer != 1);
-
-        if (mouseButton2IsTransfer)
-        {
-            DtbDragSite         dragSite = (DtbDragSite)clientData;
-
-            /* A mouse-down event has occurred on Button2, and Button2 is
-             * configured to be transfer.
-             */
-            dtb_drag_start(dragSite, event);
-        }
-    }
-}
-
-
-static int
-dtb_drag_start(DtbDragSite dragSite, XEvent *event)
-{
-    DtbDndDragStartInfoRec	dragStart;
-    Arg				args[3];
-    int				n = 0;
-
-    dragInProgress = True;
-
-    dragSite->convertCBRec[0].closure = (XtPointer)dragSite;
-    dragSite->dragToRootCBRec[0].closure = (XtPointer)dragSite;
-    dragSite->dragFinishCBRec[0].closure = (XtPointer)dragSite;
-
-    /*
-     * Call the client callback to update values for drag start
-     */
-    memset((void*)&dragStart, 0, sizeof(DtbDndDragStartInfoRec));
-    dragStart.protocol= dragSite->protocol;
-    dragStart.operations = dragSite->operations;
-    dragStart.cursor = dragSite->sourceIcon;
-    dragStart.bufferIsText = dragSite->bufferIsText;
-    dragStart.allowDropOnRootWindow = dragSite->allowDropOnRootWindow;
-    dragStart.numItems = 1;
-    if (dragSite->callback != NULL)
-    {
-        dragSite->callback(DTB_DND_DRAG_START, &dragStart, NULL,NULL,NULL,NULL);
-    }
-
-    n = 0;
-    if (dragStart.cursor != NULL)
-    {
-	XtSetArg(args[n], DtNsourceIcon, dragStart.cursor); ++n;
-    }
-    if (   (dragStart.bufferIsText) 
-	&& (dragStart.protocol == DtDND_BUFFER_TRANSFER) )
-    {
-	XtSetArg(args[n], DtNbufferIsText, True); ++n;
-    }
-    if (dragStart.allowDropOnRootWindow)
-    {
-	XtSetArg(args[n], DtNdropOnRootCallback, (XtPointer)dragSite->dragToRootCBRec); ++n;
-    }
-    if (DtDndDragStart(dragSite->widget, event, 
-	dragStart.protocol,
-	dragStart.numItems,
-	dragStart.operations,
-	dragSite->convertCBRec, dragSite->dragFinishCBRec,
-	args, n) == NULL)
-    {
-	/* drag start failed */
-	dtb_drag_terminate(dragSite);
-	return -1;
-    }
-    return 0;
-}
-
-
-static void
-dtb_drag_convertCB(
-			Widget		dragContext,
-			XtPointer	clientData,
-			XtPointer	callData
-)
-{
-    DtbDragSite			dragSite = (DtbDragSite)clientData;
-    DtDndConvertCallback	convert = (DtDndConvertCallback)callData;
-    DtDndContext		*dragData = convert->dragData;
-    int				i = 0;
-
-    switch (convert->reason)
-    {
-	case DtCR_DND_CONVERT_DATA:
-	    dragSite->callback(DTB_DND_CONVERT,NULL,convert,NULL,NULL,NULL);
-	break;
-
-	case DtCR_DND_CONVERT_DELETE:
-	    dragSite->callback(DTB_DND_DELETE,NULL,NULL,NULL,convert,NULL);
-	break;
-    }
-}
-
-
-static void
-dtb_drag_to_rootCB(
-			Widget		dragContext,
-			XtPointer	clientData,
-			XtPointer	callData
-)
-{
-    DtbDragSite			dragSite = (DtbDragSite)clientData;
-    DtbDndDroppedOnRootWindowInfoRec	dropInfo;
-    memset(&dropInfo, 0, sizeof(DtbDndDroppedOnRootWindowInfoRec));
-
-    dropInfo.droppedOnRootWindow = True;
-    dragSite->callback(DTB_DND_DROPPED_ON_ROOT_WINDOW,
-			NULL,NULL,&dropInfo,NULL,NULL);
-}
-
-
-static void
-dtb_drag_finishCB(
-			Widget		dragContext,
-			XtPointer	clientData,
-			XtPointer	callData
-)
-{
-    DtbDragSite			dragSite = (DtbDragSite)clientData;
-    DtDndDragFinishCallback	finish = (DtDndDragFinishCallback)callData;
-
-    dragSite->callback(DTB_DND_FINISH,NULL,NULL,NULL,NULL,finish);
-    dtb_drag_terminate((DtbDragSite)clientData);
-}
-
-
-static void
-dtb_drop_animateCB(
-			Widget		dragContext,
-			XtPointer	clientData,
-			XtPointer	callData
-)
-{
-    DtbDropSite		dropSite = (DtbDropSite)clientData;
-    DtDndDropAnimateCallback 	animateInfo = 
-					(DtDndDropAnimateCallback)callData;
-    dropSite->callback(
-	dropSite->widget, DTB_DND_ANIMATE, NULL, NULL, animateInfo);
-}
-
-
-static void
-dtb_drop_transferCB(
-			Widget		dragContext,
-			XtPointer	clientData,
-			XtPointer	callData
-)
-{
-    DtbDropSite			dropSite = (DtbDropSite)clientData;
-    DtDndTransferCallback	transferInfo = (DtDndTransferCallback)callData;
-
-    dropSite->callback(
-	dropSite->widget, DTB_DND_RECEIVE_DATA, NULL, transferInfo, NULL);
-}
-
-
diff -Naru a/Morsetutor/dtb_utils.h b/Morsetutor/dtb_utils.h
--- a/Morsetutor/dtb_utils.h	2017-06-05 17:27:38.135785780 +0000
+++ b/Morsetutor/dtb_utils.h	2017-06-05 17:28:08.375785295 +0000
@@ -12,7 +12,6 @@
 #include <stdlib.h>
 #include <X11/Intrinsic.h>
 #include <Xm/Xm.h>
-#include <Dt/Dnd.h>
 
 /*
  * Function type for client session save callback
@@ -64,69 +63,6 @@
 
 
 /*
- * Types for Drag and Drop utilities
- */
-typedef enum
-{
-    DTB_DND_UNDEF = 0,
-    DTB_DND_ANIMATE,
-    DTB_DND_CONVERT,
-    DTB_DND_DELETE,
-    DTB_DND_DRAG_START,
-    DTB_DND_DROPPED_ON,
-    DTB_DND_DROPPED_ON_ROOT_WINDOW,
-    DTB_DND_FINISH,
-    DTB_DND_RECEIVE_DATA,
-    DTB_DND_REGISTER
-} DTB_DND_REQUEST;
-
-typedef struct
-{
-    DtDndProtocol      protocol;
-    unsigned char      operations;     /* XmCopy | XmMove | XmLink */
-    Boolean            bufferIsText;
-    Boolean            allowDropOnRootWindow;
-    int                numItems;
-    Widget             cursor;         /* from DtDndCreateSourceIcon() */
-} DtbDndDragStartInfoRec, *DtbDndDragStartInfo;
-
-typedef struct
-{
-    Boolean    droppedOnRootWindow;
-} DtbDndDroppedOnRootWindowInfoRec, *DtbDndDroppedOnRootWindowInfo;
-
-typedef void   (*DtbDndDragCallback)(
-                       DTB_DND_REQUEST                 request,
-                       DtbDndDragStartInfo             dragStart,
-                       DtDndConvertCallback            convert,
-                       DtbDndDroppedOnRootWindowInfo   droppedOnRootWindow,
-                       DtDndConvertCallback            deleteSource,
-                       DtDndDragFinishCallback         finish
-               );
-
-typedef unsigned long  DtbDragSiteHandle;
-
-
-typedef struct {
-DtDndProtocol      	protocols;
-unsigned char      	operations;     /* XmCopy | XmMove | XmLink */
-Boolean            	textIsBuffer;
-Boolean            	preservePreviousRegistration;
-Boolean		respondToDropsOnChildren;
-} DtbDndDropRegisterInfoRec, *DtbDndDropRegisterInfo;
-
-typedef void	(*DtbDndDropCallback)(
-			Widget				widget,
-			DTB_DND_REQUEST			request,
-			DtbDndDropRegisterInfo		registerInfo,
-			DtDndTransferCallback		receiveInfo,
-			DtDndDropAnimateCallback	animateInfo
-		);
-
-typedef unsigned long	DtbDropSiteHandle;
-
-
-/*
  * Types of group layout
  */
 typedef enum {
@@ -250,52 +186,7 @@
 );
 char *  dtb_get_command();
 String dtb_get_exe_dir(void);
-void dtb_help_dispatch(
-    Widget 	widget,
-    XtPointer 	clientData,
-    XtPointer 	callData
-);
-void dtb_more_help_dispatch(
-    Widget 	widget,
-    XtPointer 	clientData,
-    XtPointer 	callData
-);
-void dtb_help_back_hdlr(
-    Widget 	widget,
-    XtPointer 	clientData,
-    XtPointer 	callData
-);
-void dtb_do_onitem_help();
-int dtb_show_help_volume_info(
-    char	*volume_name,
-    char	*location_id
-);
-void  dtb_call_help_callback(
-    Widget widget,
-    XtPointer clientData,
-    XtPointer callData
-);
 int  dtb_popup_menu_register(Widget popupMenu, Widget parent);
-int dtb_drag_site_register(
-                        Widget 			widget,
-			DtbDndDragCallback	callback,
-			DtDndProtocol		protocol,
-			unsigned char		operations,
-			Boolean			bufferIsText,
-			Boolean			allowDropOnRootWindow,
-			Pixmap			cursor,
-			Pixmap			cursorMask,
-			DtbDragSiteHandle	*dragSiteHandleOut
-);
-int dtb_drop_site_register(
-                        Widget                  widget,
-                        DtbDndDropCallback      callback,
-                        DtDndProtocol		protocols,
-                        unsigned char           operations,
-                        Boolean                 dropsOnChildren,
-                        Boolean                 preservePreviousRegistration,
-                        DtbDropSiteHandle       *dropSiteHandleOut
-);
 void dtb_children_center(
     Widget		form,
     DTB_CENTERING_TYPES	type
diff -Naru a/Morsetutor/morsetutor.c b/Morsetutor/morsetutor.c
--- a/Morsetutor/morsetutor.c	2017-06-05 17:27:38.135785780 +0000
+++ b/Morsetutor/morsetutor.c	2017-06-05 17:28:08.375785295 +0000
@@ -26,9 +26,6 @@
 #include <Xm/Xm.h>
 #include <Xm/MwmUtil.h>
 #include <Xm/Protocols.h>
-#include <Dt/Help.h>
-#include <Dt/HelpQuickD.h>
-#include <Dt/HelpDialog.h>
 #include "main_ui.h"
 #include "settings_ui.h"
 #include "charset_ui.h"
